#!/bin/bash
# Script pour configurer les permissions PostgreSQL correctement
# Setup PostgreSQL permissions for villa_sales database

set -e

echo "============================================================"
echo "üîß Configuration des Permissions PostgreSQL"
echo "   Villa √† Vendre Marrakech"
echo "============================================================"
echo ""

# Couleurs pour l'output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# V√©rifier si on est root ou avec sudo
if [ "$EUID" -ne 0 ] && ! sudo -n true 2>/dev/null; then 
    echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© avec sudo${NC}"
    echo "Usage: sudo bash setup_postgres_permissions.sh"
    exit 1
fi

# Variables (modifiez si n√©cessaire)
DB_NAME=${PGDATABASE:-villa_sales}
DB_USER=${PGUSER:-villa_user}
DB_PASS=${PGPASSWORD:-changeme}

echo -e "${YELLOW}üìã Configuration:${NC}"
echo "   Database: $DB_NAME"
echo "   User: $DB_USER"
echo ""

# V√©rifier si PostgreSQL est install√© et en cours d'ex√©cution
echo "üîç V√©rification de PostgreSQL..."
if ! systemctl is-active --quiet postgresql; then
    echo -e "${RED}‚ùå PostgreSQL n'est pas en cours d'ex√©cution${NC}"
    echo "D√©marrage de PostgreSQL..."
    sudo systemctl start postgresql
    sudo systemctl enable postgresql
    echo -e "${GREEN}‚úÖ PostgreSQL d√©marr√©${NC}"
fi

# Cr√©er l'utilisateur s'il n'existe pas
echo ""
echo "üë§ Configuration de l'utilisateur PostgreSQL..."
sudo -u postgres psql -tc "SELECT 1 FROM pg_user WHERE usename = '$DB_USER'" | grep -q 1 || \
sudo -u postgres psql << EOF
CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';
ALTER USER $DB_USER CREATEDB;
EOF

echo -e "${GREEN}‚úÖ Utilisateur $DB_USER configur√©${NC}"

# Cr√©er la base de donn√©es si elle n'existe pas
echo ""
echo "üóÑÔ∏è  Configuration de la base de donn√©es..."
sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || \
sudo -u postgres psql << EOF
CREATE DATABASE $DB_NAME OWNER $DB_USER;
EOF

echo -e "${GREEN}‚úÖ Base de donn√©es $DB_NAME cr√©√©e${NC}"

# Donner tous les privil√®ges
echo ""
echo "üîê Attribution des permissions..."
sudo -u postgres psql << EOF
-- Se connecter √† la base de donn√©es
\c $DB_NAME

-- Donner tous les privil√®ges sur la base de donn√©es
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;

-- Donner les privil√®ges sur le sch√©ma public
GRANT ALL PRIVILEGES ON SCHEMA public TO $DB_USER;
GRANT CREATE ON SCHEMA public TO $DB_USER;

-- Donner les privil√®ges sur toutes les tables existantes
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $DB_USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $DB_USER;

-- Donner les privil√®ges sur les futures tables
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO $DB_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO $DB_USER;

-- Rendre l'utilisateur propri√©taire du sch√©ma public (pour √©viter les erreurs de permission)
ALTER SCHEMA public OWNER TO $DB_USER;

-- Afficher les privil√®ges
\du $DB_USER
EOF

echo -e "${GREEN}‚úÖ Permissions configur√©es avec succ√®s${NC}"

# Tester la connexion
echo ""
echo "üß™ Test de connexion..."
if PGPASSWORD=$DB_PASS psql -U $DB_USER -d $DB_NAME -h localhost -c "SELECT 1;" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Connexion r√©ussie !${NC}"
else
    echo -e "${RED}‚ùå √âchec de la connexion${NC}"
    exit 1
fi

echo ""
echo "============================================================"
echo -e "${GREEN}‚úÖ CONFIGURATION TERMIN√âE AVEC SUCC√àS !${NC}"
echo "============================================================"
echo ""
echo "Variables d'environnement √† ajouter dans .env:"
echo ""
echo "PGHOST=localhost"
echo "PGPORT=5432"
echo "PGUSER=$DB_USER"
echo "PGPASSWORD=$DB_PASS"
echo "PGDATABASE=$DB_NAME"
echo ""
echo "Prochaines √©tapes:"
echo "1. Mettre √† jour votre fichier .env avec les valeurs ci-dessus"
echo "2. Lancer: python fix_database.py"
echo "3. Lancer: python app.py"
echo ""
